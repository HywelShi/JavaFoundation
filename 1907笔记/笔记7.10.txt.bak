String字符串
引用类型 底层是字符char数组
如果创建字符串数组，默认值null
null表示没有引用

1.字符串的创建
方法一：String a = "hello world!";
方法二：String b = new String("hello world!");

2.字符串的比较
==比较：比较是否指向同一个内容
equals比较：比较内容是否相等，跟指向无关
只要发生判断，一般情况下都是用equals

3.字符串的拼接
采用+拼接 从左往右拼接，小括号优先级更好
如果加号两侧有字符串则进行拼接
如果两次都是数字则进行加法计算
1+2+"3" = "33"
"1"+2+3 = "123"
"1"+(2+3) = "15"

4.大小写转换
toLowerCase转换为小写
toUpperCase转换为大写
数字字符不受影响

5.替换字符串里面某些字符
replaceAll(被替换的字符，替换后的字符);
案例：屏蔽敏感字

6.查询字符串当中某一个字符的位置
indexOf() -首次出现的位置
字符串的下标也是从0开始
通过某一个位置查找对应的字符
charAt()


案例：统计某一段文章中某一个人名出现的次数

7.String当中的拆分
toCharArray()可以将字符串拆分为字符数组 每个字符都拆开
split()可以根据具体的要求来拆分，比如逗号或者空格等

8.String正则表达式  
其实就是一段有特殊含义的字符串
一般用来指定规则

8.1语法结构
^规则$

8.2数量限制
0-9之间任意的数字[0-9]
^[0-9]*$	表示0个或者多个数字
^[0-9]+$	表示1个或者多个数字
^[0-9]?$	表示0个或者1个数字
^[0-9]{N,M}$	表示N个到M个数字
^[0-9]{N}$	表示N个数字

8.2常用的规则
[0-9]		[\d]	0-9任意一个数字
[a-zA-Z]		任意一个字母
[0-9a-zA-Z]	[\w]	任意一个数字或者字母

注册：
用户名必须为5-15位的字母或者数字
^[\\w]{5,15}$
密码必须为6-18位字母和数字 
^(?![\\d]+$)(?![a-zA-Z]+$)[\\w]{6,18}$

(?![规则1]+$)[规则2]限定后面的规则2不全是规则1
(?![\\d]+$)限定后面的规则不全是数字
(?![a-zA-Z]+$)限定后面的规则不全是字母



手机号
^1[3|4|5|7|8|9][0-9]{9}$



案例：验证手机号
11位
第一位：1
第二位：3,4,5,7,8,9
第三位：0-9
第四位-第十一位 [0-9]

^1[3|4|5|7|8|9][0-9]{9}$

案例：用户注册验证
验证用户 
验证密码
验证手机号
三个都符合规则提示注册成功


三个死循环嵌套
每个循环都提示输入内容
判断规则
一旦三个规则都满足
则跳出最外层循环
提示注册成功

作业：
1.思考一下程序的答案
String a = "hello";
String b = new String("hello");
String c = "hel"+"lo";
String d = a;
请问：a==b a==c a==d的结果

2.给任意一段文字，统计前两个字出现的次数

3.将注册程序再写一遍

